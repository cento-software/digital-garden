---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "@/layouts/BlogPost.astro";
import { render } from "astro:content";
import { parseHTML } from "linkedom";
import FormattedDate from "@/components/FormattedDate.astro";

export async function getStaticPaths() {
	const isRelativeUrl = (url: string) =>
		url.indexOf("http://") === 0 || url.indexOf("https://") === 0;

	const posts = await getCollection("writings");

	const postsWithRelativeLinks = posts.map((post) => {
		const { document } = parseHTML(post.rendered?.html);

		const relativeLinks = [...document.querySelectorAll("a")].filter(
			(anchor) => !isRelativeUrl(anchor.href),
		);

		return { ...post, relativeLinks };
	});

	return postsWithRelativeLinks.map((post) => {
		return {
			params: { slug: post.id },
			props: {
				post,
				relatedPosts: posts.filter(
					({ id, data: { topics } }) =>
						id !== post.id &&
						post.data.topics?.some((topic) =>
							topics?.includes(topic),
						),
				),
				mentions: post.relativeLinks
					.filter((anchor) =>
						anchor.href.startsWith(
							`${import.meta.env.BASE_URL}/writings/`,
						),
					)
					.map((anchor) => {
						const id = anchor.href.slice(
							`${import.meta.env.BASE_URL}/writings/`.length,
						);

						return posts.find((p) => p.id === id);
					}),
				mentionedBy: postsWithRelativeLinks.filter(
					({ id, relativeLinks }) =>
						id !== post.id &&
						relativeLinks.some(
							(relativeLink) =>
								relativeLink.href ===
								`${import.meta.env.BASE_URL}/writings/${post.id}`,
						),
				),
			},
		};
	});
}

type Props = {
	post: CollectionEntry<"writings">;
	relatedPosts: CollectionEntry<"writings">[];
	mentionedBy: CollectionEntry<"writings">[];
	mentions: CollectionEntry<"writings">[];
};

const { post, relatedPosts, mentionedBy, mentions } = Astro.props;
const { Content } = await render(post);
---

<BlogPost {...post.data}>
	<Content />
	{
		mentions.length > 0 && (
			<section>
				<h3>Mentions</h3>
				{mentions.map((post) => (
					<li>
						<a
							href={`${import.meta.env.BASE_URL}/writings/${post.id}`}
						>
							<FormattedDate date={post.data.pubDate} />{" "}
							{post.data.title}
						</a>
					</li>
				))}
			</section>
		)
	}
	{
		mentionedBy.length > 0 && (
			<section>
				<h3>Mentioned by</h3>
				{mentionedBy.map((post) => (
					<li>
						<a
							href={`${import.meta.env.BASE_URL}/writings/${post.id}`}
						>
							<FormattedDate date={post.data.pubDate} />{" "}
							{post.data.title}
						</a>
					</li>
				))}
			</section>
		)
	}
	{
		relatedPosts.length > 0 && (
			<section>
				<h3>Related</h3>
				{relatedPosts.map((post) => (
					<li>
						<a
							href={`${import.meta.env.BASE_URL}/writings/${post.id}`}
						>
							<FormattedDate date={post.data.pubDate} />{" "}
							{post.data.title}
						</a>
					</li>
				))}
			</section>
		)
	}
</BlogPost>
